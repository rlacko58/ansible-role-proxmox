---
# Validation

- name: "check if rootfs variable provided right"
  fail:
    msg: >-
      rootfs variable should be defined in 'rootfs_create' or 'rootfs_set'!
  when: rootfs is defined

# Tasks

- name: Check if Container exists and store it in variable
  shell: "if pct status {{ vmid }} > /dev/null 2>&1; then echo true; else echo false; fi"
  register: container_exists
  changed_when: false

- name: Check if VM exists with the given vmid
  shell: "if qm status {{ vmid }} > /dev/null 2>&1; then echo true; else echo false; fi"
  register: vm_exists
  when: container_exists.stdout is match("false")
  changed_when: false

- name: "Stop execution if the provided container vmid is taken by a VM"
  fail:
    msg: >-
      The requested vmid is already taken by a VM!
  when: container_exists.stdout is match("false") and vm_exists.stdout is match("true")

- name: Create Container (pct create ...)
  import_tasks: "commands/container/create.yml"
  when: state is undefined and container_exists.stdout is match("false")

- name: Update Container (pct set ...)
  import_tasks: "commands/container/set.yml"
  when: state is undefined and container_exists.stdout is match("true")

- name: Check status of container
  command: 'pct status {{ vmid }}'
  register: container_status
  changed_when: false
  when: state is defined and container_exists.stdout is match("true")

- name: Reboot (pct reboot ...)
  import_tasks: "commands/container/reboot.yml"
  when: >-
    state is defined and state == "reboot" and 
    container_exists.stdout is match("true") and container_status.stdout is match("status: running")

- name: Start if Reboot requested and stopped or just Start requested (pct start ...)
  import_tasks: "commands/container/start.yml"
  when: >-
    state is defined and (state == "reboot" or state == "start") and
    container_exists.stdout is match("true") and container_status.stdout is match("status: stopped")

- name: Stop (pct stop ...)
  import_tasks: "commands/container/stop.yml"
  when: >-
    state is defined and state == "stop" and 
    container_exists.stdout is match("true") and container_status.stdout is match("status: running")

- name: Shutdown (pct shutdown ...)
  import_tasks: "commands/container/shutdown.yml"
  when: >-
    state is defined and state == "shutdown" and 
    container_exists.stdout is match("true") and container_status.stdout is match("status: running")

- name: Destroy (pct destroy ...)
  import_tasks: "commands/container/destroy.yml"
  when: >-
    state is defined and state == "destroy" and container_exists.stdout is match("true")

- name: Already destroyed
  debug:
    msg: Container is already destroyed
  when: >-
    state is defined and state == "destroy" and container_exists.stdout is match("false")
